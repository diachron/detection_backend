/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.diachron.detection.exploit;

import java.io.FileReader;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Properties;
import org.diachron.detection.repositories.JDBCVirtuosoRep;
import org.diachron.detection.utils.DatasetsManager;

/**
 *
 * @author quest
 */
public class ArchiveExploiter {

    private String dictionary = "http://www.diachron-fp7.eu/archive/dictionary";
    JDBCVirtuosoRep archJDBC;
    JDBCVirtuosoRep chDetJDBC;

    public ArchiveExploiter(Properties archProp, Properties chDetProp) throws Exception {
        archJDBC = new JDBCVirtuosoRep(archProp);
        chDetJDBC = new JDBCVirtuosoRep(chDetProp);
    }

    public void terminate() {
        archJDBC.terminate();
        chDetJDBC.terminate();
    }

    public void addDiachronicDataset(String diachronicDatasetUri, String diachronicDatasetLabel) throws Exception {
        DatasetsManager dManager = new DatasetsManager(chDetJDBC, diachronicDatasetUri);
        dManager.insertDataset(diachronicDatasetUri, diachronicDatasetLabel);
    }

    public void deleteDiachronicDataset(String diachronicDatasetUri) throws Exception {
        DatasetsManager dManager = new DatasetsManager(chDetJDBC, diachronicDatasetUri);
        dManager.deleteDataset(true, true);  //delete the associated versions and changes ontologies
    }

    public void addDiachronicDatasetVersion(String diachronicDatasetUri, String datasetVersion, String datasetVersionLabel) throws Exception {
        DatasetsManager dManager = new DatasetsManager(chDetJDBC, diachronicDatasetUri);
        String version = fetchChDetectVersion(datasetVersion);
        dManager.assignVersionToDataset(version, datasetVersionLabel);
    }

    public void deleteDiachronicDatasetVersion(String diachronicDatasetUri, String datasetVersion) throws Exception {
        DatasetsManager dManager = new DatasetsManager(chDetJDBC, diachronicDatasetUri);
        String chDetVersion = fetchChDetectVersion(datasetVersion);
        dManager.deleteDatasetVersion(chDetVersion, true, true);
    }

    public String fetchChDetectVersion(String datasetVersion) throws Exception {
        String query = "select ?recordset, ?timestamp from <" + dictionary + "> where {\n"
                + "<" + datasetVersion + "> <http://www.diachron-fp7.eu/resource/hasRecordSet> ?recordset;\n"
                + "<http://purl.org/dc/terms/created> ?timestamp.\n"
                + "}";
        String recordset = null;
        String timestamp = null;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        ResultSet results = archJDBC.executeSparqlQuery(query, false);
        while (results.next()) {
            recordset = results.getString(1);
            timestamp = results.getString(2);
        }
        return recordset + "/" + sdf.parse(timestamp).getTime();
    }

    public String fetchDiachronDatasetVersion(String chDetVersion) throws SQLException {
        String recordset = chDetVersion.substring(0, chDetVersion.lastIndexOf("/"));
        String query = "select ?dataset from <" + dictionary + "> where {\n"
                + "?dataset <http://www.diachron-fp7.eu/resource/hasRecordSet> <" + recordset + ">\n"
                + "}";
        ResultSet results = archJDBC.executeSparqlQuery(query, false);
        String dataset = null;
        while (results.next()) {
            dataset = results.getString(1);
        }
        return dataset;
    }

}
